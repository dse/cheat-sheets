/* -*- javascript -*- */
{
    // Documentation for all JSHint options: <https://jshint.com/docs/options/>

    // ========================================================================
    // # Enforcing options
    //     When set to true, these options will make JSHint produce more warnings about your code.
    // ========================================================================

    // bitwise: xxx,
    //     This option prohibits the use of bitwise operators such as ^ (XOR), | (OR) and others.

    // curly: xxx,
    //     This option requires you to always put curly braces around blocks in loops and conditionals.

    // eqeqeq: xxx,
    //     This options prohibits the use of == and != in favor of === and !==.

    // esversion: xxx,
    //     This option is used to specify the ECMAScript version to which the code must adhere.
    //     It can be 3, 5, 6, 7, 8, or 9.  5 is the baseline for IE11 support.

    // forin: xxx,
    //     This option requires all for in loops to filter object's items. 

    // freeze: xxx,
    //     This options prohibits overwriting prototypes of native objects such as Array, Date and so on.

    // futurehostile: xxx,
    //     This option enables warnings about the use of identifiers which are defined in future versions of JavaScript.

    // globals: xxx,
    //     This option can be used to specify a white list of global variables that are not formally defined in the source code.

    // latedef: xxx,
    //     This option prohibits the use of a variable before it was defined.
    //     Setting this option to 'nofunc' will allow function declarations to be ignored.

    // leanswitch: xxx,
    //     This option prohibits unnecessary clauses within switch statements.

    // maxcomplexity: xxx,
    //     This option lets you control cyclomatic complexity throughout your code.

    // maxdepth: xxx,
    //     This option lets you control how nested do you want your blocks to be.

    // maxerr: xxx,
    //     This options allows you to set the maximum amount of warnings JSHint will produce before giving up. Default is 50.

    // maxparams: xxx,
    //     This option lets you set the max number of formal parameters allowed per function.

    // maxstatements: xxx,
    //     This option lets you set the max number of statements allowed per function.

    // noarg: xxx,
    //     This option prohibits the use of arguments.caller and arguments.callee.

    // nocomma: xxx,
    //     This option prohibits the use of the comma operator.

    // nonbsp: xxx,
    //     This option warns about "non-breaking whitespace" characters.

    // nonew: xxx,
    //     This option prohibits the use of constructor functions for side-effects.

    // noreturnawait: xxx,
    //     Async functions resolve on their return value. In most cases, this makes returning the result of an AwaitExpression (which is itself a Promise instance) unnecessary. For clarity, it's often preferable to return the result of the asynchronous operation directly. The notable exception is within the try clause of a TryStatement--for more, see "await vs return vs return await":

    //     https://jakearchibald.com/2017/await-vs-return-vs-return-await/

    // predef: xxx,
    //     This option allows you to control which variables JSHint considers to be implicitly defined in the environment.

    // regexpu: xxx,
    //     This option enables warnings for regular expressions which do not include the `u` flag. The `u` flag extends support for Unicode and also enables more strict parsing rules. JSHint will enforce these rules even if it is executed in a JavaScript engine which does not support the `u` flag.

    // shadow: xxx,
    //     This option suppresses warnings about variable shadowing, i.e., declaring a variable that had been already declared somewhere in the outer scope.

    // singleGroups: xxx,
    //     This option prohibits the use of the grouping operator when it is not strictly required.

    // strict: xxx,
    //     This option requires the code to run in ECMAScript 5's strict mode.

    // trailingcomma: xxx,
    //     This option warns when a comma is NOT placed after the last element in an array or object literal.

    // undef: xxx,
    //     This option prohibits the use of explicitly undeclared variables.

    // unused: xxx,
    //     This option warns when you define and never use your variables.

    // varstmt: xxx,
    //     When set to true, the use of `var` statements are forbidden.

    // ========================================================================
    // # Relaxing options
    //     When set to true, these options will make JSHint produce fewer warnings about your code.
    // ========================================================================

    // asi: xxx,
    //     This option suppresses warnings about missing semicolons.

    // boss: xxx,
    //     This option suppresses warnings about the use of assignments in cases where comparisons are expected.

    // debug: xxx,
    //     This option suppresses warnings about the debugger statements in your code.

    // elision: xxx,
    //     This option tells JSHint that your code uses ES3 array elision elements, or empty elements (for example, [1, , , 4, , , 7]).

    // eqnull: xxx,
    //     This option suppresses warnings about == null comparisons.
    //     Such comparisons are often useful when you want to check if a variable is null or undefined.

    // evil: xxx,
    //     This option suppresses warnings about the use of eval.

    // expr: xxx,
    //     This option suppresses warnings about the use of expressions where normally you would expect to see assignments or function calls.

    // funcscope: xxx,
    //     This option suppresses warnings about declaring variables inside of control structures while accessing them later from the outside.

    // iterator: xxx,
    //     This option suppresses warnings about the __iterator__ property. This property is not supported by all browsers so use it carefully.

    // lastsemic: xxx,
    //     This option suppresses warnings about missing semicolons, but only when the semicolon is omitted for the last statement in a one-line block:

    // loopfunc: xxx,
    //     This option suppresses warnings about functions inside of loops.

    // moz: xxx,
    //     This options tells JSHint that your code uses Mozilla JavaScript extensions.

    // notypeof: xxx,
    //     This option suppresses warnings about invalid typeof operator values.

    // noyield: xxx,
    //     This option suppresses warnings about generator functions with no yield statement in them.

    // plusplus: xxx,
    //     This option prohibits the use of unary increment and decrement operators.

    // proto: xxx,
    //     This option suppresses warnings about the __proto__ property.

    // scripturl: xxx,
    //     This option suppresses warnings about the use of script-targeted URLsâ€”such as javascript:....

    // supernew: xxx,
    //     This option suppresses warnings about "weird" constructions like new function () { ... } and new Object;.

    // validthis: xxx,
    //     This option suppresses warnings about possible strict violations when the code is running in strict mode and you use `this` in a non-constructor function.

    // withstmt: xxx,
    //     This option suppresses warnings about the use of the with statement.

    // ========================================================================
    // # Environments
    //     These options let JSHint know about some pre-defined global variables.
    // ========================================================================

    // browser: xxx,
    //     This option defines globals exposed by modern browsers: all the way from good old document and navigator to the HTML5 FileReader and other new developments in the browser world.
    //     NOTE: This option doesn't expose variables like alert or console. See option devel for more information.

    // browserify: xxx,
    //     This option defines globals available when using the Browserify tool to build a project.

    // couch: xxx,
    //     This option defines globals exposed by CouchDB. CouchDB is a document-oriented database that can be queried and indexed in a MapReduce fashion using JavaScript.

    // devel: xxx,
    //     This option defines globals that are usually used for logging poor-man's debugging: console, alert, etc.

    // dojo: xxx,
    //     This option defines globals exposed by the Dojo Toolkit.

    // jasmine: xxx,
    //     This option defines globals exposed by the Jasmine unit testing framework.

    // jquery: xxx,
    //     This option defines globals exposed by the jQuery JavaScript library.

    // mocha: xxx,
    //     This option defines globals exposed by the "BDD" and "TDD" UIs of the Mocha unit testing framework.

    // module: xxx,
    //     This option informs JSHint that the input code describes an ECMAScript 6 module. All module code is interpreted as strict mode code.

    // mootools: xxx,
    //     This option defines globals exposed by the MooTools JavaScript framework.

    // node: xxx,
    //     This option defines globals available when your code is running inside of the Node runtime environment. Node.js is a server-side JavaScript environment that uses an asynchronous event-driven model. This option also skips some warnings that make sense in the browser environments but don't make sense in Node such as file-level use strict pragmas and console.log statements.

    // nonstandard: xxx,
    //     This option defines non-standard but widely adopted globals such as escape and unescape.

    // phantom: xxx,
    //     This option defines globals available when your core is running inside of the PhantomJS runtime environment. PhantomJS is a headless WebKit scriptable with a JavaScript API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.

    // prototypejs: xxx,
    //     This option defines globals exposed by the Prototype JavaScript framework.

    // qunit: xxx,
    //     This option defines globals exposed by the QUnit unit testing framework.

    // rhino: xxx,
    //     This option defines globals available when your code is running inside of the Rhino runtime environment. Rhino is an open-source implementation of JavaScript written entirely in Java.

    // shelljs: xxx,
    //     This option defines globals exposed by the ShellJS library.

    // typed: xxx,
    //     This option defines globals for typed array constructors.

    // worker: xxx,
    //     This option defines globals available when your code is running inside of a Web Worker. Web Workers provide a simple means for web content to run scripts in background threads.

    // wsh: xxx,
    //     This option defines globals available when your code is running as a script for the Windows Script Host.

    // yui: xxx,
    //     This option defines globals exposed by the YUI JavaScript framework.
}
